shiny::runApp('individual_analytics/individual-causal-effects/APP_2')
install_github("susanathey/causalTree")
install.packages("devtools")
library(devtools)
install_github("susanathey/causalTree")
install_github("susanathey/causalTree")
install.packages("devtools")
library(devtools)
install_github("susanathey/causalTree")
install_github("susanathey/causalTree")
#install_github("susanathey/causalTree")
library(causalTree)
install_github("susanathey/causalTree")
R CMD INSTALL
install_github("susanathey/causalTree")
install_github("susanathey/causalTree")
install.packages("readr", type = "source")
install_github("susanathey/causalTree")
install.packages("devtools")
install_github("susanathey/causalTree")
library(devtools)
install_github("susanathey/causalTree")
R CMD INSTALL
devtools::find_rtools(TRUE)
devtools::find_rtools(TRUE)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("susanathey/causalTree")
find_rtools()
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools"
)
find_rtools()
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
devtools::install_github("r-lib/devtools")
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
install_github("susanathey/causalTree")
install_github("susanathey/causalTree")
install_github("susanathey/causalTree")
library(causalTree)
#install_github("susanathey/causalTree")
library(causalTree)
shiny::runApp('individual_analytics/individual-causal-effects/APP_2')
shiny::runApp('individual_analytics/individual-causal-effects/APP_2')
library(htmltools)
library(causalTree)
library(dplyr)
library(ggplot2)
library(plotly)
library(extrafont)
library(ggthemes)
library(shinydashboard)
library(shiny)
library(leaflet)
library(formattable)
library(ggrepel)
library(distances)
library(caret)
install.packages('htmltools')
install.packages("htmltools")
install.packages("causalTree")
install.packages("purrr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("plotly")
install.packages("extrafont")
install.packages("ggthemes")
install.packages("shinydashboard")
install.packages("shiny")
install.packages("leaflet")
install.packages("formattable")
install.packages("ggrepel")
install.packages("caret")
install.packages("distance")
install.packages("distances")
install.packages("randomForest")
shiny::runApp('individual_analytics/individual-causal-effects/APP_2')
load(file = "//dc3fs1/secure/CFL/Data For AIR Analysts/Leading Indicators/Data/AllObjects_need_for_torun_ShinyApp.RData")
runApp('individual_analytics/individual-causal-effects/APP_2')
load(file = "//dc3fs1/secure/CFL/Data For AIR Analysts/Leading Indicators/Data/AllObjects_need_for_torun_ShinyApp.RData")
runApp('individual_analytics/individual-causal-effects/APP_2')
#install_github("susanathey/causalTree")
library(causalTree)
library(dplyr)
library(ggplot2)
#install.packages("grf")
library(grf)
setwd("G:/causal_tree/simulation_grf/unif_tree_rf")
# initiate a dataframe
set.seed(42)
sim_df <- data.frame(matrix(ncol = 0, nrow = 8000))
sim_df$x1 <- runif(n=8000, min = -4, max = 4)
sim_df$x2 <- rnorm(n = 8000, mean = 0, sd = 0.5)
sim_df$x3 <- rnorm(n = 8000, mean = 1, sd = 0.25)
sim_df$x4 <- rnorm(n = 8000, mean = 0.2, sd = 0.75)
sim_df$x5 <- rnorm(n = 8000, mean = 0, sd = 1.2)
sim_df$x6 <- rnorm(n = 8000, mean = 1.3, sd = 2)
sim_df$x7 <- rnorm(n = 8000, mean = 0.95, sd = 0.95)
sim_df$x8 <- rnorm(n = 8000, mean = 0, sd = 1.5)
sim_df$x9 <- rnorm(n = 8000, mean = 2, sd = 1)
sim_df$x10 <- rnorm(n = 8000, mean = 1, sd = 2)
sim_df$treatment <- unlist(append(list(rep(0,4000)), list(rep(1,4000))))
sim_df$error <- rnorm(n = 8000, mean = 0, sd = 0.01)
#generate the fake response variable and corresponding causal effect (design 1 and design 2)
sim_df <- sim_df %>% mutate(d1_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1/2) + error,
d2_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1^3) + error,
d1_true_effect = x1/2,
d2_true_effect = x1^3)
#train test split
train_size <- floor(0.625 * nrow(sim_df))
set.seed(123)
train_ind <- sample(seq_len(nrow(sim_df)), size = train_size)
train_set <- sim_df[train_ind, ]
test_set <- sim_df[-train_ind, ]
######################################################################################################
#tree model (design 1)
#train the tree model
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d1_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d1_pred_true_tree <-  ggplot(test_set, aes(x=x1, y=d1_pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_tree
ggsave (paste0("d1_pred_true_tree.png"), device = "png")
test_set$d1_residual <- test_set$d1_true_effect - test_set$d1_pred
d1_fit_res_tree <- ggplot(test_set, aes(x=d1_true_effect, y=d1_residual)) + geom_point(shape=1)
d1_fit_res_tree
ggsave (paste0("d1_fit_res_tree.png"), device = "png")
######################################################################################################
#tree model (design 2)
#train the tree model
tree <- causalTree(d2_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d2_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d2_pred_true_tree <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_tree
ggsave (paste0("d2_pred_true_tree.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred
d2_fit_res_tree <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual)) + geom_point(shape=1)
d2_fit_res_tree
ggsave (paste0("d2_fit_res_tree.png"), device = "png")
######################################################################################################
######################################################################################################
######################################################################################################
#prepare data for random forest
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
Y_1 <- as.matrix(train_set %>% select(d1_y))
Y_2 <- as.matrix(train_set %>% select(d2_y))
W <- as.matrix(train_set %>% select(treatment))
X_test <- as.matrix(test_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
#random forest (design 1)
# train random forest
d1_forest <- causal_forest(X, Y_1, W)
#make prediction on test set
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
ggsave (paste0("d1_pred_true_rf.png"), device = "png")
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_true_res_rf <- ggplot(test_set, aes(x=d1_true_effect, y=d1_residual_rf)) + geom_point(shape=1)
d1_true_res_rf
ggsave (paste0("d1_true_res_rf.png"), device = "png")
######################################################################################################
#random forest (design 2)
# train random forest
d2_forest <- causal_forest(X, Y_2, W)
#make prediction on test set
test_set$d2_pred_rf <- predict(d2_forest, X_test)$prediction
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual_rf <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_true_res_rf <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual_rf)) + geom_point(shape=1)
d2_true_res_rf
ggsave (paste0("d2_true_res_rf.png"), device = "png")
d1_true_res_tree <- ggplot(test_set, aes(x=d1_true_effect, y=d1_residual)) + geom_point(shape=1)
d1_true_res_tree
ggsave (paste0("d1_true_res_tree.png"), device = "png")
d2_true_res_tree <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual)) + geom_point(shape=1)
d2_true_res_tree
ggsave (paste0("d2_true_res_tree.png"), device = "png")
setwd("G:/causal_tree/simulation_grf/normal_tree_rf")
# initiate a dataframe
set.seed(42)
sim_df <- data.frame(matrix(ncol = 0, nrow = 8000))
#sim_df$x1 <- runif(n=8000, min = -4, max = 4)
sim_df$x1 <- rnorm(n=8000, mean = 0, sd = 2)
sim_df$x2 <- rnorm(n = 8000, mean = 0, sd = 0.5)
sim_df$x3 <- rnorm(n = 8000, mean = 1, sd = 0.25)
sim_df$x4 <- rnorm(n = 8000, mean = 0.2, sd = 0.75)
sim_df$x5 <- rnorm(n = 8000, mean = 0, sd = 1.2)
sim_df$x6 <- rnorm(n = 8000, mean = 1.3, sd = 2)
sim_df$x7 <- rnorm(n = 8000, mean = 0.95, sd = 0.95)
sim_df$x8 <- rnorm(n = 8000, mean = 0, sd = 1.5)
sim_df$x9 <- rnorm(n = 8000, mean = 2, sd = 1)
sim_df$x10 <- rnorm(n = 8000, mean = 1, sd = 2)
sim_df$treatment <- unlist(append(list(rep(0,4000)), list(rep(1,4000))))
sim_df$error <- rnorm(n = 8000, mean = 0, sd = 0.01)
#generate the fake response variable and corresponding causal effect (design 1 and design 2)
sim_df <- sim_df %>% mutate(d1_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1/2) + error,
d2_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1^3) + error,
d1_true_effect = x1/2,
d2_true_effect = x1^3)
#train test split
train_size <- floor(0.625 * nrow(sim_df))
set.seed(123)
train_ind <- sample(seq_len(nrow(sim_df)), size = train_size)
train_set <- sim_df[train_ind, ]
test_set <- sim_df[-train_ind, ]
#tree model (design 1)
#train the tree model
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d1_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d1_pred_true_tree <-  ggplot(test_set, aes(x=x1, y=d1_pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_tree
ggsave (paste0("d1_pred_true_tree.png"), device = "png")
test_set$d1_residual <- test_set$d1_true_effect - test_set$d1_pred
d1_true_res_tree <- ggplot(test_set, aes(x=d1_true_effect, y=d1_residual)) + geom_point(shape=1)
d1_true_res_tree
ggsave (paste0("d1_true_res_tree.png"), device = "png")
#tree model (design 2)
#train the tree model
tree <- causalTree(d2_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d2_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d2_pred_true_tree <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_tree
ggsave (paste0("d2_pred_true_tree.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred
d2_true_res_tree <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual)) + geom_point(shape=1)
d2_true_res_tree
ggsave (paste0("d2_true_res_tree.png"), device = "png")
#prepare data for random forest
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
Y_1 <- as.matrix(train_set %>% select(d1_y))
Y_2 <- as.matrix(train_set %>% select(d2_y))
W <- as.matrix(train_set %>% select(treatment))
X_test <- as.matrix(test_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
#random forest (design 1)
# train random forest
d1_forest <- causal_forest(X, Y_1, W)
#make prediction on test set
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
ggsave (paste0("d1_pred_true_rf.png"), device = "png")
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_true_res_rf <- ggplot(test_set, aes(x=d1_true_effect, y=d1_residual_rf)) + geom_point(shape=1)
d1_true_res_rf
ggsave (paste0("d1_true_res_rf.png"), device = "png")
#random forest (design 2)
# train random forest
d2_forest <- causal_forest(X, Y_2, W)
#make prediction on test set
test_set$d2_pred_rf <- predict(d2_forest, X_test)$prediction
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual_rf <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_true_res_rf <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual_rf)) + geom_point(shape=1)
d2_true_res_rf
ggsave (paste0("d2_true_res_rf.png"), device = "png")
