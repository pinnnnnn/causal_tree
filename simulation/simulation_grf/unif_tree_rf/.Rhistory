tree <- causalTree(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 5, cp = 0, minsize = 20, propensity = 0.5)
#tree model (design 1)
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 5, cp = 0, minsize = 20, propensity = 0.5)
#pruning the tree
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
tree
opfit
#tree model (design 1)
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 1, cp = 0, minsize = 25, propensity = 0.5)
#pruning the tree
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
#tree model (design 1)
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 5, cp = 0, minsize = 25, propensity = 0.5)
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#pruning the tree
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(opfit)
rpart.plot(tree)
test_set$d1_pred <- predict(tree, newdata=test_set, type="vector")
p1 <- cf_plot(test_set, d1_true_effect, d1_pred)
p1
p1 <- cf_plot(test_set, test_set$d1_true_effect, test_set$d1_pred)
p1
d1_fit_res
d1_fit_res <- plot_residual(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_fit_res
plot_residual(test_set, test_set$d1_true_effect, test_set$d1_pred)
test_set$d1_residual <- test_set$d1_true_effect - test_set$d1_pred
d1_fit_res <- ggplot(test_set, aes(x=d1_pred, y=d1_residual)) + geom_point(shape=1)
d1_fit_res
d1_fit_res
library(causalTree)
library(dplyr)
library(ggplot2)
# initiate a dataframe
set.seed(42)
sim_df <- data.frame(matrix(ncol = 0, nrow = 8000))
sim_df$x1 <- runif(n=8000, min = -4, max = 4)
sim_df$x2 <- rnorm(n = 8000, mean = 0, sd = 0.5)
sim_df$x3 <- rnorm(n = 8000, mean = 1, sd = 0.25)
sim_df$x4 <- rnorm(n = 8000, mean = 0.2, sd = 0.75)
sim_df$x5 <- rnorm(n = 8000, mean = 0, sd = 1.2)
sim_df$x6 <- rnorm(n = 8000, mean = 1.3, sd = 2)
sim_df$x7 <- rnorm(n = 8000, mean = 0.95, sd = 0.95)
sim_df$x8 <- rnorm(n = 8000, mean = 0, sd = 1.5)
sim_df$x9 <- rnorm(n = 8000, mean = 2, sd = 1)
sim_df$x10 <- rnorm(n = 8000, mean = 1, sd = 2)
sim_df$treatment <- unlist(append(list(rep(0,4000)), list(rep(1,4000))))
sim_df$error <- rnorm(n = 8000, mean = 0, sd = 0.01)
#generate the fake response variable and corresponding causal effect (design 1 and design 2)
sim_df <- sim_df %>% mutate(d1_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1/2) + error,
d2_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1^3) + error,
d1_true_effect = x1/2,
d2_true_effect = x1^3)
#train test split
train_size <- floor(0.625 * nrow(sim_df))
set.seed(123)
train_ind <- sample(seq_len(nrow(sim_df)), size = train_size)
train_set <- sim_df[train_ind, ]
test_set <- sim_df[-train_ind, ]
######################################################################################################
# function to plot true causal effect vs predicted value
cf_plot <- function(test_set, true_effect, pred){
p <- ggplot(test_set, aes(x=x1, y=pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_line(data = test_set, aes(x = x1, y = true_effect), color = 'red') #+
#ylim(c(0,3.5)) +
#xlim(c(-6,6))
return(p)
}
# function to plot fitted causal effect vs residual
plot_residual <-function(test_set, true_effect, pred){
test_set$residual <- test_set$true_effect - test_set$pred
p <- ggplot(test_set, aes(x=pred, y=residual)) + geom_point(shape=1)
return(p)
}
######################################################################################################
#tree model (design 1)
#train the tree model
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d1_pred <- predict(tree, newdata=test_set, type="vector")
d1_pred_true <- cf_plot(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_pred_true
test_set$d1_residual <- test_set$d1_true_effect - test_set$d1_pred
d1_fit_res <- ggplot(test_set, aes(x=d1_pred, y=d1_residual)) + geom_point(shape=1)
d1_fit_res
setwd("G:/causal_tree/unif_tree_rf")
d1_pred_true_tree <- cf_plot(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_pred_true_tree
ggsave (paste0("d1_pred_true_tree.png"), device = "png")
d1_fit_res_tree <- ggplot(test_set, aes(x=d1_pred, y=d1_residual)) + geom_point(shape=1)
d1_fit_res_tree
ggsave (paste0("d1_fit_res_tree.png"), device = "png")
#tree model (design 2)
#train the tree model
tree <- causalTree(d2_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d2_pred <- predict(tree, newdata=test_set, type="vector")
d2_pred_true_tree <- cf_plot(test_set, test_set$d2_true_effect, test_set$d2_pred)
d2_pred_true_tree
ggsave (paste0("d2_pred_true_tree.png"), device = "png")
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred
d2_fit_res_tree <- ggplot(test_set, aes(x=d2_pred, y=d2_residual)) + geom_point(shape=1)
d2_fit_res_tree
ggsave (paste0("d2_fit_res_tree.png"), device = "png")
cf_plot <- function(test_set, true_effect, pred){
p <- ggplot(test_set, aes(x=x1, y=pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = true_effect), color = 'red') #+
#ylim(c(0,3.5)) +
#xlim(c(-6,6))
return(p)
}
d2_pred_true_tree <- cf_plot(test_set, test_set$d2_true_effect, test_set$d2_pred)
d1_pred_true_tree <- cf_plot(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_pred_true_tree <- cf_plot(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_pred_true_tree
d1_pred_true_tree
d2_pred_true_tree <- cf_plot(test_set, test_set$d2_true_effect, test_set$d2_pred)
d2_pred_true_tree
# function to plot true causal effect vs predicted value
cf_plot_d1 <- function(test_set, true_effect, pred){
p <- ggplot(test_set, aes(x=x1, y=pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = true_effect), color = 'red') #+
#ylim(c(0,3.5)) +
#xlim(c(-6,6))
return(p)
}
cf_plot_d2 <- function(test_set){
p <- ggplot(test_set, aes(x=x1, y=pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
return(p)
}
d1_pred_true_tree <- cf_plot_d1(test_set, test_set$d1_true_effect, test_set$d1_pred)
d1_pred_true_tree
ggsave (paste0("d1_pred_true_tree.png"), device = "png")
d2_pred_true_tree <- cf_plot_d2(test_set, test_set$d2_true_effect, test_set$d2_pred)
d2_pred_true_tree
cf_plot_d2 <- function(test_set){
p <- ggplot(test_set, aes(x=x1, y=pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
return(p)
}
d2_pred_true_tree <- cf_plot_d2(test_set, test_set$d2_true_effect, test_set$d2_pred)
d2_pred_true_tree
d1_pred_true_tree <-  ggplot(test_set, aes(x=x1, y=d1_pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_tree
d2_pred_true_tree <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_tree
test_set$d2_pred <- predict(tree, newdata=test_set, type="vector")
d2_pred_true_tree <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_tree
ggsave (paste0("d2_pred_true_tree.png"), device = "png")
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred
d2_fit_res_tree <- ggplot(test_set, aes(x=d2_pred, y=d2_residual)) + geom_point(shape=1)
d2_fit_res_tree
ggsave (paste0("d2_fit_res_tree.png"), device = "png")
install.packages("grf")
#prepare data for random forest
X <- train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
X
typeof(X)
train_set
#prepare data for random forest
X <- train_set %>% select(x1)#, x2, x3, x4, x5, x6, x7, x8, x9, x10)
X
#prepare data for random forest
X <- train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
X
X <- train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
Y_1 <- train_set %>% select(d2_y)
W <- train_set %>% select(treatment)
tau.forest = causal_forest(X, Y_1, W)
#install.packages("grf")
library(grf)
tau.forest <- causal_forest(X, Y_1, W)
length(Y_1)
Y_1 <- train_set %>% select(d2_y)
Y_1
X <- train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
Y_1 <- train_set %>% select(d2_y)
W <- train_set %>% select(treatment)
tau.forest <- causal_forest(X, Y_1, W)
rbinom(n, 1, 0.4 + 0.2 * (X[,1] > 0))
matrix(rnorm(n*p), n, p)
n = 2000; p = 10
X = matrix(rnorm(n*p), n, p)
X
typeof(X)
#prepare data for random forest
X <- train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
typeof(X)
#prepare data for random forest
X <- unlist(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
X
#prepare data for random forest
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
X
typeof(X)
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
Y_1 <- as.matrix(train_set %>% select(d2_y))
W <- as.matrix(train_set %>% select(treatment))
tau.forest <- causal_forest(X, Y_1, W)
d1_forest <- causal_forest(X, Y_1, W)
predict(tau.forest, X.test)predict(tau.forest, X.test)
predict(d1_forest, X_test)
#make prediction on test set
X_test <- as.matrix(test_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
predict(d1_forest, X_test)
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
#prepare data for random forest
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
Y_1 <- as.matrix(train_set %>% select(d1_y))
W <- as.matrix(train_set %>% select(treatment))
# train random forest
d1_forest <- causal_forest(X, Y_1, W)
#make prediction on test set
X_test <- as.matrix(test_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
ggsave (paste0("d1_pred_true_rf.png"), device = "png")
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_fit_res_tree <- ggplot(test_set, aes(x=d1_pred, y=d1_residual_rf)) + geom_point(shape=1)
d1_fit_res_tree
ggsave (paste0("d1_fit_res_tree.png"), device = "png")
View(test_set)
Y_2 <- as.matrix(train_set %>% select(d2_y))
# train random forest
d2_forest <- causal_forest(X, Y_2, W)
#make prediction on test set
test_set$d2_pred_rf <- predict(d2_forest, X_test)$prediction
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_fit_res_rf <- ggplot(test_set, aes(x=d1_pred, y=d1_residual_rf)) + geom_point(shape=1)
d1_fit_res_rf
ggsave (paste0("d1_fit_res_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_fit_res_rf <- ggplot(test_set, aes(x=d2_pred, y=d2_residual)) + geom_point(shape=1)
d2_fit_res_rf
ggsave (paste0("d2_fit_res_rf.png"), device = "png")
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
#random forest (design 1)
# train random forest
d1_forest <- causal_forest(X, Y_1, W)
#make prediction on test set
X_test <- as.matrix(test_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
ggsave (paste0("d1_pred_true_rf.png"), device = "png")
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_fit_res_rf <- ggplot(test_set, aes(x=d1_pred_rf, y=d1_residual_rf)) + geom_point(shape=1)
d1_fit_res_rf
ggsave (paste0("d1_fit_res_rf.png"), device = "png")
######################################################################################################
#random forest (design 2)
# train random forest
d2_forest <- causal_forest(X, Y_2, W)
#make prediction on test set
test_set$d2_pred_rf <- predict(d2_forest, X_test)$prediction
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual_rf <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_fit_res_rf <- ggplot(test_set, aes(x=d2_pred_rf, y=d2_residual_rf)) + geom_point(shape=1)
d2_fit_res_rf
ggsave (paste0("d2_fit_res_rf.png"), device = "png")
setwd("G:/causal_tree/unif_tree_rf")
# initiate a dataframe
set.seed(42)
sim_df <- data.frame(matrix(ncol = 0, nrow = 8000))
sim_df$x1 <- runif(n=8000, min = -4, max = 4)
sim_df$x2 <- rnorm(n = 8000, mean = 0, sd = 0.5)
sim_df$x3 <- rnorm(n = 8000, mean = 1, sd = 0.25)
sim_df$x4 <- rnorm(n = 8000, mean = 0.2, sd = 0.75)
sim_df$x5 <- rnorm(n = 8000, mean = 0, sd = 1.2)
sim_df$x6 <- rnorm(n = 8000, mean = 1.3, sd = 2)
sim_df$x7 <- rnorm(n = 8000, mean = 0.95, sd = 0.95)
sim_df$x8 <- rnorm(n = 8000, mean = 0, sd = 1.5)
sim_df$x9 <- rnorm(n = 8000, mean = 2, sd = 1)
sim_df$x10 <- rnorm(n = 8000, mean = 1, sd = 2)
sim_df$treatment <- unlist(append(list(rep(0,4000)), list(rep(1,4000))))
sim_df$error <- rnorm(n = 8000, mean = 0, sd = 0.01)
#generate the fake response variable and corresponding causal effect (design 1 and design 2)
sim_df <- sim_df %>% mutate(d1_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1/2) + error,
d2_y = (x1/2+x2+x3+x4+x5+x6+x7+x8+x9+x10) + (1/2)*(2*treatment -1)*(x1^3) + error,
d1_true_effect = x1/2,
d2_true_effect = x1^3)
#train test split
train_size <- floor(0.625 * nrow(sim_df))
set.seed(123)
train_ind <- sample(seq_len(nrow(sim_df)), size = train_size)
train_set <- sim_df[train_ind, ]
test_set <- sim_df[-train_ind, ]
######################################################################################################
#tree model (design 1)
#train the tree model
tree <- causalTree(d1_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d1_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d1_pred_true_tree <-  ggplot(test_set, aes(x=x1, y=d1_pred)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_tree
ggsave (paste0("d1_pred_true_tree.png"), device = "png")
test_set$d1_residual <- test_set$d1_true_effect - test_set$d1_pred
d1_fit_res_tree <- ggplot(test_set, aes(x=d1_pred, y=d1_residual)) + geom_point(shape=1)
d1_fit_res_tree
ggsave (paste0("d1_fit_res_tree.png"), device = "png")
######################################################################################################
#tree model (design 2)
#train the tree model
tree <- causalTree(d2_y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = train_set,
treatment = train_set$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 10, cp = 0, minsize = 25, propensity = 0.5)
#tree pruning
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(tree)
#make prediction
test_set$d2_pred <- predict(tree, newdata=test_set, type="vector")
#plot true causal effect vs predicted value
d2_pred_true_tree <- ggplot(test_set, aes(x=x1, y=d2_pred)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_tree
ggsave (paste0("d2_pred_true_tree.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual <- test_set$d2_true_effect - test_set$d2_pred
d2_fit_res_tree <- ggplot(test_set, aes(x=d2_pred, y=d2_residual)) + geom_point(shape=1)
d2_fit_res_tree
ggsave (paste0("d2_fit_res_tree.png"), device = "png")
######################################################################################################
######################################################################################################
######################################################################################################
#prepare data for random forest
X <- as.matrix(train_set %>% select(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10))
Y_1 <- as.matrix(train_set %>% select(d1_y))
Y_2 <- as.matrix(train_set %>% select(d2_y))
W <- as.matrix(train_set %>% select(treatment))
#random forest (design 1)
# train random forest
d1_forest <- causal_forest(X, Y_1, W)
#make prediction on test set
test_set$d1_pred_rf <- predict(d1_forest, X_test)$prediction
#plot true causal effect vs predicted value
d1_pred_true_rf <-  ggplot(test_set, aes(x=x1, y=d1_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
geom_smooth(data = test_set, aes(x = x1, y = d1_true_effect), color = 'red')
d1_pred_true_rf
ggsave (paste0("d1_pred_true_rf.png"), device = "png")
test_set$d1_residual_rf <- test_set$d1_true_effect - test_set$d1_pred_rf
d1_fit_res_rf <- ggplot(test_set, aes(x=d1_pred_rf, y=d1_residual_rf)) + geom_point(shape=1)
d1_fit_res_rf
ggsave (paste0("d1_fit_res_rf.png"), device = "png")
######################################################################################################
#random forest (design 2)
# train random forest
d2_forest <- causal_forest(X, Y_2, W)
#make prediction on test set
test_set$d2_pred_rf <- predict(d2_forest, X_test)$prediction
#plot true causal effect vs predicted value
d2_pred_true_rf <- ggplot(test_set, aes(x=x1, y=d2_pred_rf)) +
geom_point(shape=1) +
geom_smooth(method=loess) +
geom_smooth(data = test_set, aes(x = x1, y = d2_true_effect), color = 'red') #+
#ylim(c(-10,50)) #+
#xlim(c(-6,6))
d2_pred_true_rf
ggsave (paste0("d2_pred_true_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual_rf <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_fit_res_rf <- ggplot(test_set, aes(x=d2_pred_rf, y=d2_residual_rf)) + geom_point(shape=1)
d2_fit_res_rf
ggsave (paste0("d2_fit_res_rf.png"), device = "png")
# function to plot fitted causal effect vs residual
test_set$d2_residual_rf <- test_set$d2_true_effect - test_set$d2_pred_rf
d2_fit_res_rf <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual_rf)) + geom_point(shape=1)
d2_fit_res_rf
d1_true_res_rf <- ggplot(test_set, aes(x=d1_pred_rf, y=d1_residual_rf)) + geom_point(shape=1)
d1_true_res_rf
ggsave (paste0("d1_true_res_rf.png"), device = "png")
d2_true_res_rf <- ggplot(test_set, aes(x=d2_true_effect, y=d2_residual_rf)) + geom_point(shape=1)
d2_true_res_rf
ggsave (paste0("d2_true_res_rf.png"), device = "png")
